<!DOCTYPE html>
<html lang="ja" xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta charset="utf-8" />
	<title>SS形態素解析 - WizTools</title>
	<!--@Detail@SSの文字列を（30分くらいかけて）機械学習し異常検出する@-->
</head>
<body onload=ww()>
    動作が遅いためchrome先生に「応答していません」って怒られますが固まってないです。待って下さい。(3, 4分です)<br>

    <pre>
        ★暇つぶし用資料集★
        Q. 形態素解析って？
        A. 文書を単語に機械分割することです。tiny_segmenterでやっています。

        Q. これは何をするの？
        A. ss_name毎にdescを構成する単語の出現確率を求め、その結果からss_nameを求めます。

        Q. 具体例！
        A. ss_skillboostは100%の確率で"発動","スキル","スペシャルスキル","早め"等の単語を含んでいます。
        　 もしこれを含まないdescならば、確実にss_skilboostでないと言えます。

        Q. ss_consume_ownが馬鹿すぎない？
        A. ss_consume_ownが100%の確率で持つ単語は、"を"だけです。descが不安定のため、良い結果が得られません。
        　 なおss_nameを間違えて登録してある既存データがあると、大幅に馬鹿になります。

        Q. これを使ってdesc→proc自動変換できる？
        A. ss_name自動設定くらいならできます。数字はこのレベルの解析だと無理。
        
        Q. 中タイトルの説明
        　 ●ss名 minScore(データの信ぴょう性的なアレ) 登録済procの内hitしたdesc数/登録済proc数(違ってたらバグ) enum:proc非登録だけどHITしたdescの数

        Q. 何故こんなに遅いの？
        A. 常識的な機械学習は学習した結果を記憶するのですが、これは毎回0から勉強し直しているからです。

        Q. 馬鹿なのでは？
        A. はい

        Q. 何故スパゲッティソースなの？
        A. 仕様です

        Q. 遅いね
        A. ごめんね

        Q. 実際固まってるだろｗ
        A. まって
    </pre>

    <script type="text/javascript" src="tiny_segmenter.js" charset="UTF-8"></script>

    <script type="text/javascript">
        var ignoreDictionaly=["0回復","味方全体の攻撃力をアップ","敵単体へ","全体へ","状態異常を回復","味方全体を徐々に回復"]
        //↑削除してもexactryに響かない単語。ざっくり要素数倍の時間がかかるので注意！


        var ops=["ss1","ss2"]
        function tinySeg(str){
            var segmenter = new TinySegmenter(); 
            return segmenter.segment(str)
        }

        function ww(){
            document.body.innerHTML="<h1>wiztools 形態素解析</h1>"
            var dictionaly=getWord()
            for(key in SpSkill){
                w2(key, dictionaly)
            }
        }

        function w2(ssName, dic){
            //procにssNameが含まれるdescについてdicの単語の登場頻度を計算する
            var baseNum=getBaseNum(ssName) //procにssNameが含まれるSSの数
            var filter=[] //単語の登場頻度的なやつ
            dic.forEach(function(word){
                var count=0;
                Cards.forEach(function(card){
                    for(var opn=0; opn<2; opn++){
                        if(card[ops[opn]]){
                            if(JSON.stringify(card[ops[opn]].proc).indexOf('"name":"'+ssName+'"')!=-1){
                                if(card[ops[opn]].desc.indexOf(word)!=-1){
                                    count++;
                                }
                            }
                        }
                    }
                })
                filter.push([word,count/baseNum*100])
            })
            //フィルターをdebugするときに並べ替えると見やすかった名残
            /*filter.sort(function(a,b){
                if(a[1] < b[1]) return 1;
                if(a[1] > b[1]) return -1;
                return 0
            })*/
            //procにssNameが含まれる全てのdescから最小のscoreを計算する
            //scoreというのはフィルタの[0]が出現するときに[1]を合計したもの
            var minScore=Infinity
            Cards.forEach(function(card){
                for(var opn=0; opn<2; opn++){
                    if(card[ops[opn]]){
                        if(JSON.stringify(card[ops[opn]].proc).indexOf('"name":"'+ssName+'"')!=-1){
                            var tmpScore=calcScore(card[ops[opn]].desc, filter, [])
                            minScore = minScore >= tmpScore ? tmpScore : minScore
                        }
                    }
                }
            })
            //ignoreFilterの取得
            var ignoreFilter=[]
            ignoreDictionaly.forEach(function(ii){
                //取りあえずignoreFilterを有効にしてみて、exactlyNumが変わらないなら、それはignoreFilter
                var tmpAnal = doAnalyze(ssName, minScore, filter, [ii])
                if(tmpAnal.exactlyNum==baseNum){
                    ignoreFilter.push(ii)
                }
            })
            //結果の取得と表示
            var resAnal = doAnalyze(ssName, minScore, filter, ignoreFilter)
            var resultArr = resAnal.resultArr
            var exactlyNum = resAnal.exactlyNum
            document.body.innerHTML += "<br>●" + ssName + " minScore:" + Math.floor(minScore)
            document.body.innerHTML += " " + exactlyNum + "/" + baseNum
            document.body.innerHTML += " enum:" + resultArr.length
            document.body.innerHTML += "<br><small style=color:lightgray><b>ignoreFilter:</b>"+JSON.stringify(ignoreFilter)+"</small>"
            // document.body.innerHTML += "<br><small style=color:lightgray>"+JSON.stringify(filter)+"</small>"
            document.body.innerHTML += "<br>"+JSON.stringify(resultArr)
            document.body.innerHTML += "<br>"
        }

        function doAnalyze(ssName, minScore, filter, ignoreFilter){
            //procにssNameが含まれない全てのカードからScore>=minScoreの物を抽出
            var resultArr = []
            var exactlyNum = 0
            Cards.forEach(function(card){
                for(var opn=0; opn<2; opn++){
                    if(card[ops[opn]]){
                        var tmpDesc=card[ops[opn]].desc
                        var tmpScore=calcScore(tmpDesc, filter, ignoreFilter)
                        if(tmpScore >= minScore){
                            if(JSON.stringify(card[ops[opn]].proc).indexOf('"name":"'+ssName+'"')!=-1){
                                //procにssNameが含まれる時
                                exactlyNum++;
                            }else{
                                //procにssNameが含まれないが抽出された時
                                resultArr.push([card.name,card[ops[opn]].desc])
                            }
                        }
                    }
                }
            })
            return {exactlyNum:exactlyNum, resultArr:resultArr}
        }

        function getWord(){
            var resArr=[]
            Cards.forEach(function(card){
                for(var opn=0; opn<2; opn++){
                    if(card[ops[opn]]){
                        var tmpArr = tinySeg(card[ops[opn]].desc)
                        resArr=resArr.concat(tmpArr)
                    }
                }
            })
            resArr=resArr.filter(function(e,i,s){
                return s.indexOf(e)===i;
            })
            return resArr;
        }

        function getBaseNum(analStr){
            var baseNum=0
            Cards.forEach(function(card){
                for(var opn=0; opn<2; opn++){
                    if(card[ops[opn]]){
                        if(JSON.stringify(card[ops[opn]].proc).indexOf('"name":"'+analStr+'"')!=-1){
                            baseNum++;
                        }
                    }
                }
            })
            return baseNum
        }

        function calcScore(str, filter, ignoreFilter){
            // strにfilterを適応したときのスコアを返す
            var score=0
            var tmpDesc = str
            //ignoreFilterの適応
            ignoreFilter.forEach(function(ii){
                tmpDesc=tmpDesc.replace(ii, "")
            })
            filter.forEach(function(e){
                if(str.indexOf(e[0])==-1 && e[1]==100){
                    //出現率100%の単語を含んでいない場合、HITしない
                    score=-Infinity
                }
                if(tmpDesc.indexOf(e[0])==-1 && e[1]==100){
                    //出現率100%の単語を含んでいない場合、HITしない2
                    score=-Infinity
                }
                if(str.indexOf(e[0])!=-1 && e[1]==0){
                    //出現率0%の単語を含んでいる場合、HITしない
                    score=-Infinity
                }
                if(tmpDesc.indexOf(e[0])!=-1){
                    //単語を含むならば、Scoreを加算
                    score+=e[1]
                }
            })
            return score
        }
    </script>

	<!-- Javascript -->
    <!--#config timefmt="%Y%m%d_%H%M%S" -->
	<script type="text/javascript" src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
	<script type="text/javascript" src="http://code.jquery.com/ui/1.11.3/jquery-ui.min.js"></script>
	<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js"></script>
    <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"></script>
    <script type="text/javascript" src="/download/romaji.js"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/loader.js?                  <!--#flastmod virtual='/js/loader.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/pagetemp.js?                <!--#flastmod virtual='/js/pagetemp.js'-->"></script>
   <!-- 他jsに依存しない基礎関数群 -->
    <script type="text/javascript" charset="UTF-8" src="/js/general.js?                 <!--#flastmod virtual='/js/general.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/simulator/awake.js?         <!--#flastmod virtual='/js/simulator/awake.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/simulator/species.js?       <!--#flastmod virtual='/js/simulator/species.js'-->"></script>
	<!-- データ群(基礎関数に依存する) -->
    <script type="text/javascript" charset="UTF-8" src="/js/data/skill_ans.js?          <!--#flastmod virtual='/js/data/skill_ans.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/data/skill_spe.js?          <!--#flastmod virtual='/js/data/skill_spe.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/data/skill_spe_body.js?     <!--#flastmod virtual='/js/data/skill_spe_body.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/data/skill_awake.js?        <!--#flastmod virtual='/js/data/skill_awake.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/data/skill_crystal.js?      <!--#flastmod virtual='/js/data/skill_crystal.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/data/skill_enemy.js?        <!--#flastmod virtual='/js/data/skill_enemy.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/data/quests.php"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/data/cards.js?              <!--#flastmod virtual='/js/data/cards.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/dynamic.js?                 <!--#flastmod virtual='/js/dynamic.js'-->"></script>
	<!-- 処理群(データ群に依存する) -->
    <script type="text/javascript" charset="UTF-8" src="/js/deck/deckdata.js?           <!--#flastmod virtual='/js/deck/deckdata.js'-->"></script>
    <script type="text/javascript" charset="UTF-8" src="/js/deck/decksuggest.js?        <!--#flastmod virtual='/js/deck/decksuggest.js'-->"></script>
   </body>
</html>